variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  POSTGRES_DB: atmos-games-apps-store
  POSTGRES_HOST: postgres
  POSTGRES_PORT: 5432
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REGISTRY_USER: $REGISTRY_USER
  IMAGE_NAME: $IMAGE_NAME
  IMAGE_TAG: latest
  CONTAINER_NAME: $CONTAINER_NAME
  GCP_USERNAME: $GCP_USERNAME
  GCP_STATIC_IP: $GCP_STATIC_IP
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  SONAR_TOKEN: "e445a57baa81643c1148d0dfda5d1c53f10bd5c0"
  SONAR_HOST_URL: "https://sonarcloud.io"


stages:
  - build
  - test
  - publish
  - deploy

Build:
  stage: build
  image: gradle:jdk17-alpine
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle wrapper
    - ./gradlew assemble
    - ls
  artifacts:
    when: always
    paths:
      - build/libs/*.jar
    expire_in: 1 week

Test:
  stage: test
  image: gradle:jdk17-alpine
  dependencies:
    - Build
  services:
    - "postgres:latest"
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export SPRING_PROFILES_ACTIVE=test
    - export STORAGE_TOKEN=$STORAGE_TOKEN_DEV
    - export STORAGE_KEY=$STORAGE_KEY_DEV
    - export STORAGE_SECRET=$STORAGE_SECRET_DEV
  script:
    - gradle check --info --stacktrace
    - gradle test
    - gradle jacocoTestReport
    - grep -Eo "Total.*?([0-9]{1,3})%" build/jacocoHtml/index.html
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  coverage: '/Total.*?([0-9]{1,3})%/'

Publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Build
  before_script:
    - echo $DOCKER_PASSWORD| docker login -u $REGISTRY_USER --password-stdin docker.io
  script:
    - ls
    - docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME --build-arg STORAGE_TOKEN=$STORAGE_TOKEN --build-arg STORAGE_KEY=$STORAGE_KEY --build-arg STORAGE_SECRET=$STORAGE_SECRET -t $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG
  tags:
    - dind
  only:
    - main

Deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - chmod 400 $SSH_KEY
    - apk update && apk add openssh-client
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@$GCP_STATIC_IP "
      docker container rm -f $CONTAINER_NAME || true &&
      docker image rm -f $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG || true &&
      docker run --name $CONTAINER_NAME -d -p 80:8080 $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG"
  only:
    - main

#sonarcloud-check:
#  image: gradle:jdk17-alpine
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script: gradle sonarqube
#  rules:
#    - if: $CI_COMMIT_REF_NAME == 'main' || $CI_PIPELINE_SOURCE == 'merge_request_event'
